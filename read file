
#property strict
#include <Trade\Trade.mqh>
CTrade trade;

// Instelbare parameters
input string InputFilePrefix = "Telegram_";
input bool EnableDebugLogs = true;
input int ScanIntervalSeconds = 5;
input bool UseCommonFiles = true;
input string TradeSymbolSuffix = "";
input double OrderLots = 0.01;
input int OrderMagicNumber = 379;

// Interne sessie-tracking
string processedFiles[];

// Hulpfuncties
int FileScopeFlag() { return UseCommonFiles ? FILE_COMMON : 0; }

string TrimBoth(const string s) {
   string t = s;
   StringTrimLeft(t);
   StringTrimRight(t);
   return t;
}

bool ParseTradeInstruction(const string line, string &baseSymbol, string &dirUpper) {
   string L = TrimBoth(line);
   int sep = StringFind(L, ";");
   if (sep < 0) return false;
   baseSymbol = TrimBoth(StringSubstr(L, 0, sep));
   dirUpper = TrimBoth(StringSubstr(L, sep + 1));
   StringToUpper(dirUpper);
   return (StringLen(baseSymbol) > 0 && (dirUpper == "BUY" || dirUpper == "SELL"));
}

bool GetMarketPrice(const string symbol, const ENUM_ORDER_TYPE orderType, double &outPrice) {
   return (orderType == ORDER_TYPE_BUY)
      ? SymbolInfoDouble(symbol, SYMBOL_ASK, outPrice)
      : SymbolInfoDouble(symbol, SYMBOL_BID, outPrice);
}

bool HasOpenPositionForComment(const string fileNameAsComment) {
   for (int i = 0; i < PositionsTotal(); i++) {
      if (!PositionSelectByTicket(PositionGetTicket(i))) continue;
      if (PositionGetInteger(POSITION_MAGIC) == OrderMagicNumber &&
          PositionGetString(POSITION_COMMENT) == fileNameAsComment)
         return true;
   }
   return false;
}

// Positie openen
void OpenPositionFromFile(const string fileName, const string symbolWithSuf, const string dirUpper) {
   if (HasOpenPositionForComment(fileName)) {
      if (EnableDebugLogs) Print("⏩ Positie bestaat al: ", fileName);
      return;
   }

   SymbolSelect(symbolWithSuf, true);
   ENUM_ORDER_TYPE orderType = (dirUpper == "BUY") ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;
   double price;
   if (!GetMarketPrice(symbolWithSuf, orderType, price)) {
      if (EnableDebugLogs) Print("❌ Geen marktprijs voor ", symbolWithSuf);
      return;
   }

   bool ok = (orderType == ORDER_TYPE_BUY)
      ? trade.Buy(OrderLots, symbolWithSuf, price, 0, 0, fileName)
      : trade.Sell(OrderLots, symbolWithSuf, price, 0, 0, fileName);

   if (!ok)
      Print("❌ Mislukt: ", fileName, " retcode=", trade.ResultRetcode(), " - ", trade.ResultRetcodeDescription());
   else
      Print("✅ Geopend: ", dirUpper, " ", symbolWithSuf, " lot=", OrderLots);
}

// Positie sluiten
void ClosePositionsWhoseFilesAreMissing(const string &presentFileNames[]) {
   for (int i = PositionsTotal() - 1; i >= 0; i--) {
      ulong ticket = PositionGetTicket(i);
      if (!PositionSelectByTicket(ticket)) continue;
      if (PositionGetInteger(POSITION_MAGIC) != OrderMagicNumber) continue;

      string symbol = PositionGetString(POSITION_SYMBOL);
      string comment = PositionGetString(POSITION_COMMENT);

      bool fileStillExists = false;
      for (int j = 0; j < ArraySize(presentFileNames); j++) {
         if (presentFileNames[j] == comment) {
            fileStillExists = true;
            break;
         }
      }

      if (!fileStillExists) {
         if (EnableDebugLogs) Print("🔻 Bestand ontbreekt, sluiten: ", comment);
         if (!trade.PositionClose(symbol))
            Print("❌ Sluiten mislukt: ", comment, " retcode=", trade.ResultRetcode(), " - ", trade.ResultRetcodeDescription());
         else
            Print("✅ Positie gesloten: ", comment);
      }
   }
}

// EA lifecycle
int OnInit() {
   trade.SetExpertMagicNumber(OrderMagicNumber); // ✅ Magic number instellen
   EventSetTimer(ScanIntervalSeconds);
   if (EnableDebugLogs) Print("🟢 ReaderUltraSimple gestart – scan elke ", ScanIntervalSeconds, "s");
   return INIT_SUCCEEDED;
}

void OnDeinit(const int reason) {
   EventKillTimer();
   if (EnableDebugLogs) Print("🔴 ReaderUltraSimple gestopt.");
}

void OnTimer() {
   string foundName;
   string presentFileNames[];
   int presentCount = 0;

   long handle = FileFindFirst(InputFilePrefix + "*.trade", foundName, FileScopeFlag());
   if (handle != INVALID_HANDLE) {
      do {
         ArrayResize(presentFileNames, presentCount + 1);
         presentFileNames[presentCount++] = foundName;

         // Sessiecontrole: bestand al verwerkt?
         bool alreadyProcessed = false;
         for (int k = 0; k < ArraySize(processedFiles); k++) {
            if (processedFiles[k] == foundName) {
               alreadyProcessed = true;
               break;
            }
         }

         if (alreadyProcessed) {
            if (EnableDebugLogs) Print("⏩ Bestand al verwerkt deze sessie: ", foundName);
            continue;
         }

         int openFlags = FILE_READ | FILE_TXT | FILE_ANSI | FILE_SHARE_READ | FileScopeFlag();
         int fileHandle = FileOpen(foundName, openFlags);
         if (fileHandle == INVALID_HANDLE) {
            if (EnableDebugLogs) Print("❌ Kan bestand niet openen: ", foundName, " (", GetLastError(), ")");
         } else {
            string line = FileReadString(fileHandle);
            FileClose(fileHandle);
            string baseSymbol, dirUpper;
            if (ParseTradeInstruction(line, baseSymbol, dirUpper)) {
               string symbolWithSuffix = baseSymbol + TradeSymbolSuffix;
               if (EnableDebugLogs)
                  Print("📥 Bestand: ", foundName, " | regel: ", line, " | symbool→ ", symbolWithSuffix, " | richting=", dirUpper);
               OpenPositionFromFile(foundName, symbolWithSuffix, dirUpper);

               ArrayResize(processedFiles, ArraySize(processedFiles) + 1);
               processedFiles[ArraySize(processedFiles) - 1] = foundName;
            } else {
               if (EnableDebugLogs) Print("⚠️ Onverwacht formaat in ", foundName, ": '", line, "' (verwacht SYMBOL;Buy/Sell)");
            }
         }
      } while (FileFindNext(handle, foundName));
      FileFindClose(handle);
   } else {
      if (EnableDebugLogs) Print("📁 Geen .trade-bestanden gevonden of fout (", GetLastError(), ")");
   }

   ClosePositionsWhoseFilesAreMissing(presentFileNames);
}
