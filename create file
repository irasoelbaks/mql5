//+------------------------------------------------------------------+
//| Expert inputs                                                    |
//+------------------------------------------------------------------+
input string FilePrefix   = "Vantage_";        // Prefix voor bestandsnaam
input bool   EnableDebug  = true;              // Debugmeldingen aan/uit
input int    TimerIntervalSeconds = 10;        // Interval voor OnTimer in seconden
input bool   UseCommonFiles = false;           // Gebruik gemeenschappelijke bestandsmap (Documents\MQL5\Files)

#include <Arrays\ArrayLong.mqh>
CArrayLong processedTickets;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   if(EnableDebug) Print("EA Initialisatie gestart.");
   EventSetTimer(TimerIntervalSeconds);
   if(EnableDebug) Print("EA Initialisatie voltooid.");
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Timer-based logic                                                |
//+------------------------------------------------------------------+
void OnTimer()
  {
   int total = PositionsTotal();
   if(EnableDebug) Print("Aantal openstaande trades: ", total);

   int new_exports = 0;

   for(int i = 0; i < total; i++)
     {
      ulong ticket = PositionGetTicket(i);

      if(processedTickets.Search(ticket) != -1)
        {
         if(EnableDebug) Print("Ticket al verwerkt: ", ticket);
         continue;
        }

      if(!PositionSelectByTicket(ticket))
        {
         if(EnableDebug) Print("Selecteren van trade lukt niet, tradeticket: ", ticket);
         continue;
        }

      string symbol = PositionGetString(POSITION_SYMBOL);
      int type = (int)PositionGetInteger(POSITION_TYPE);
      string direction = (type == POSITION_TYPE_BUY) ? "Buy" : "Sell";

      string filename = FilePrefix + (string)ticket + ".trade";

      int file_flags = FILE_WRITE | FILE_TXT | FILE_ANSI;
      if(UseCommonFiles) file_flags |= FILE_COMMON;

      // Check of bestand al bestaat
      if(FileIsExist(filename, UseCommonFiles ? FILE_COMMON : 0))
        {
         if(EnableDebug) Print("Bestand bestaat al, overslaan: ", filename);
         processedTickets.Add(ticket); // Voeg toch toe zodat we het niet blijven checken
         continue;
        }

      int file_handle = FileOpen(filename, file_flags);
      if(file_handle == INVALID_HANDLE)
        {
         if(EnableDebug) Print("Fout bij openen van exportbestand: ", filename, " (Errorcode: ", GetLastError(), ")");
         continue;
        }

      string line = symbol + ";" + direction;
      FileWrite(file_handle, line);
      FileClose(file_handle);
      if(EnableDebug) Print("Schrijf: ", line, " naar ", filename );

      processedTickets.Add(ticket);
      new_exports++;
     }

   if(EnableDebug) Print("Aantal nieuw geÃ«xporteerde trades deze cyclus: ", new_exports);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   EventKillTimer();
   ObjectDelete(0, "ExportLabel");
   if(EnableDebug) Print("EA gedeactiveerd.");
  }
