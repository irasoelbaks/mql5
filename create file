//+------------------------------------------------------------------+
//| Expert inputs                                                    |
//+------------------------------------------------------------------+
input string FilePrefix = "Trade_";       // Prefix voor bestandsnaam
input string ChartText = "Export Trade";  // Tekst op de chart

#include <Arrays\ArrayLong.mqh>
CArrayLong processedTickets;

string ticketLogFile = "exported_tickets.txt";

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Tekst op de chart
   string label_name = "ExportLabel";
   ObjectCreate(0, label_name, OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, label_name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, label_name, OBJPROP_XDISTANCE, 10);
   ObjectSetInteger(0, label_name, OBJPROP_YDISTANCE, 10);
   ObjectSetInteger(0, label_name, OBJPROP_FONTSIZE, 12);
   ObjectSetString(0, label_name, OBJPROP_TEXT, ChartText);

   // Laad eerder verwerkte tickets uit bestand
   int file_handle = FileOpen(ticketLogFile, FILE_READ | FILE_TXT);
   if(file_handle != INVALID_HANDLE)
     {
      while(!FileIsEnding(file_handle))
        {
         string line = FileReadString(file_handle);
         if(StringLen(line) > 0)
           {
            ulong ticket = (ulong)StringToInteger(line);
            if(processedTickets.Search(ticket) == -1)
               processedTickets.Add(ticket);
           }
        }
      FileClose(file_handle);
     }

   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   int total = PositionsTotal();
   for(int i = 0; i < total; i++)
     {
      ulong ticket = PositionGetTicket(i);

      // Alleen doorgaan als ticket nog niet verwerkt is
      if(processedTickets.Search(ticket) == -1)
        {
         if(PositionSelectByTicket(ticket))
           {
            string symbol = PositionGetString(POSITION_SYMBOL);
            int type = (int)PositionGetInteger(POSITION_TYPE);
            string direction = (type == POSITION_TYPE_BUY) ? "Buy" : "Sell";

            string filename = FilePrefix + (string)ticket + ".trade";
            int file_handle = FileOpen(filename, FILE_WRITE | FILE_TXT);

            if(file_handle != INVALID_HANDLE)
              {
               string line = symbol + ";" + direction;
               FileWrite(file_handle, line);
               FileClose(file_handle);

               // Voeg ticket toe aan geheugenlijst
               processedTickets.Add(ticket);

               // Voeg ticket toe aan persistent logbestand
               int log_handle = FileOpen(ticketLogFile, FILE_READ | FILE_WRITE | FILE_TXT);
               if(log_handle != INVALID_HANDLE)
                 {
                  FileSeek(log_handle, 0, SEEK_END);
                  FileWrite(log_handle, (string)ticket);
                  FileClose(log_handle);
                 }
              }
           }
        }
     }
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   ObjectDelete(0, "ExportLabel");
  }
