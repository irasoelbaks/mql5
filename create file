//+------------------------------------------------------------------+
//|                                                Writer.mq5        |
//|          Export open trades naar .trade, cleanup bij sluiting    |
//+------------------------------------------------------------------+
#property strict

//-------------------------------
// Expert inputs
//-------------------------------
input string FilePrefix            = "Telegram_";  // Prefix voor bestandsnaam
input bool   EnableDebug           = true;         // Debugmeldingen aan/uit
input int    TimerIntervalSeconds  = 5;            // Interval voor OnTimer in seconden
input bool   UseCommonFiles        = true;         // Gebruik gemeenschappelijke bestandsmap (Documents\MQL5\Files)

//-------------------------------
// Data structures
//-------------------------------
#include <Arrays/ArrayLong.mqh>
CArrayLong processedTickets;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------
int OnInit()
  {
   EventSetTimer(TimerIntervalSeconds);
   if(EnableDebug) Print("🟢 EA geactiveerd. Timer elke ", TimerIntervalSeconds, "s");
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Timer-based logic: exporteer nieuwe trades                       |
//+------------------------------------------------------------------
void OnTimer()
  {
   int total = PositionsTotal();
   if(EnableDebug) Print("📊 Aantal openstaande trades: ", total);

   // ✅ Zorg dat de array gesorteerd is voordat we binaire zoekactie doen
   if(processedTickets.Total() > 1)
      processedTickets.Sort();

   for(int i = 0; i < total; i++)
     {
      ulong ticket = PositionGetTicket(i);

      // ✅ Ticket al verwerkt? Gebruik binaire zoekactie op gesorteerde array
      if(processedTickets.Search((long)ticket) != -1)
        {
         if(EnableDebug) Print("⏩ Ticket al verwerkt: ", ticket);
         continue;
        }

      if(EnableDebug) Print("🔍 Verwerk ticket: ", ticket);

      if(!PositionSelectByTicket(ticket))
        {
         if(EnableDebug) Print("⚠️ Selecteren van trade mislukt: ", ticket);
         continue;
        }

      string symbol    = PositionGetString(POSITION_SYMBOL);
      int    type      = (int)PositionGetInteger(POSITION_TYPE);
      string direction = (type == POSITION_TYPE_BUY) ? "Buy" : "Sell";

      string filename = FilePrefix + (string)ticket + ".trade";

      int file_flags = FILE_WRITE | FILE_TXT | FILE_ANSI;
      if(UseCommonFiles) file_flags |= FILE_COMMON;

      if(FileIsExist(filename, UseCommonFiles ? FILE_COMMON : 0))
        {
         if(EnableDebug) Print("📁 Bestand bestaat al, overslaan: ", filename);
        }
      else
        {
         ResetLastError();
         int file_handle = FileOpen(filename, file_flags);
         if(file_handle == INVALID_HANDLE)
           {
            if(EnableDebug) Print("❌ Fout bij openen van bestand: ", filename,
                                  " (Errorcode: ", GetLastError(), ")");
            continue;
           }

         string line = symbol + ";" + direction;
         FileWrite(file_handle, line);
         FileClose(file_handle);
         if(EnableDebug) Print("✅ Trade geëxporteerd: ", line, " → ", filename);
        }

      // ✅ Ticket toevoegen en array gesorteerd houden (voor binaire Search)
      processedTickets.Add((long)ticket);
      if(processedTickets.Total() > 1)
         processedTickets.Sort();

      if(EnableDebug) Print("🧠 Ticket toegevoegd aan geheugen: ", ticket);
     }
  }

//+------------------------------------------------------------------+
//| Tick-based logic: verwijder .trade-bestand bij sluiting          |
//+------------------------------------------------------------------
void OnTick()
  {
   int i = processedTickets.Total() - 1;
   while(i >= 0)
     {
      ulong ticket = (ulong)processedTickets.At(i);
      bool stillOpen = false;

      for(int j = 0; j < PositionsTotal(); j++)
        {
         if(PositionGetTicket(j) == ticket)
           {
            stillOpen = true;
            break;
           }
        }

      if(!stillOpen)
        {
         string filename = FilePrefix + (string)ticket + ".trade";
         if(EnableDebug) Print("🧹 Gesloten trade gevonden: ", ticket);

         if(FileIsExist(filename, UseCommonFiles ? FILE_COMMON : 0))
           {
            if(FileDelete(filename, UseCommonFiles ? FILE_COMMON : 0))
              {
               if(EnableDebug) Print("🗑️ Bestand verwijderd: ", filename);
              }
            else
              {
               if(EnableDebug) Print("❌ Kon bestand niet verwijderen: ", filename,
                                     " (Errorcode: ", GetLastError(), ")");
              }
           }
         else
           {
            if(EnableDebug) Print("📁 Bestand bestaat niet meer: ", filename);
           }

         processedTickets.Delete(i);
         if(EnableDebug) Print("🧠 Ticket verwijderd uit geheugen: ", ticket);
        }

      i--;
     }
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------
void OnDeinit(const int reason)
  {
   EventKillTimer();
   if(EnableDebug) Print("🔴 EA gedeactiveerd.");
  }
//+------------------------------------------------------------------+
